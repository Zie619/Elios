import random
import gym
import numpy as np
from collections import deque
import tensorflow as tf


# Number of games
EPISODES = 1000
class DQNAgent:
    def __init__(self, state_size, action_size):
        self.state_size = state_size
        self.action_size = action_size
        self.memory = deque(maxlen=2000)
        self.gamma = 0.98  # discount rate
        self.epsilon = 1.0  # exploration rate
        self.epsilon_min = 0.01
        self.epsilon_decay = 0.999  # while the agent is improving we decrease the exploration rate
        self.learning_rate = 0.001
        self.layers_num = 3
        self.model = self.model()


    def model(self):
        model = tf.keras.Sequential()
        model.add(tf.keras.layers.Dense(128, input_shape=(self.state_size,), activation='relu'))
        model.add(tf.keras.layers.Dense(64, activation='relu'))
        model.add(tf.keras.layers.Dense(32, activation='relu'))
        if self.layers_num == 5:
            model.add(tf.keras.layers.Dense(16, activation='relu'))
            model.add(tf.keras.layers.Dense(8, activation='relu'))
        model.add(tf.keras.layers.Dropout(0.05))
        model.add(tf.keras.layers.Dense(self.action_size, activation='softmax'))
        model.compile(optimizer=tf.keras.optimizers.Adam(0.01),loss='mse')
        return model

    def store_for_minibatch(self, state, action, reward, next_state, done):
        self.memory.append((state, action, reward, next_state, done))


    def choose_act(self, state):
        if np.random.rand() <= self.epsilon:
            return random.randrange(self.action_size)
        act_values = self.model.predict(state)
        return np.argmax(act_values[0])
    '''This function simply extracts memories of previous experiences from the memory of the agent and splits them
    in the so called mini-batches, used then for the training phase.'''
    def learn(self, batch_size):
        minibatch = random.sample(self.memory, batch_size)
        states, targets_f = [], []
        for state, action, reward, next_state, done in minibatch:
            target = reward
            if not done:
                target = (reward + self.gamma * np.amax(self.model.predict(next_state)[0]))
            target_f = self.model.predict(state)
            target_f[0][action] = target
            states.append(state[0])
            targets_f.append(target_f[0])
        history = self.model.fit(np.array(states), np.array(targets_f), epochs=1, verbose=0)
        loss = history.history['loss'][0]
        if self.epsilon > self.epsilon_min:
            self.epsilon *= self.epsilon_decay
        return loss
    def load(self, name):
        self.model.load_weights(name)

    def save(self, name):
        self.model.save_weights(name)

env = gym.make('CartPole-v1')
env._max_episodes = 1000
state_size = env.observation_space.shape[0]
action_size = env.action_space.n
agent = DQNAgent(state_size, action_size)
done = False
batch_size = 8
scores = []
for e in range(EPISODES):
    state = env.reset()
    state = np.reshape(state, [1, state_size])
    for time in range(500):
        action = agent.choose_act(state)
        next_state, reward, done, _ = env.step(action)
        reward = reward if not done else -10
        next_state = np.reshape(next_state, [1, state_size])
        agent.store_for_minibatch(state, action, reward, next_state, done)
        state = next_state
        if done:
            print("episode: {}/{}, score: {}, e: {:.2}"
                  .format(e, EPISODES, time, agent.epsilon))
            break
        if len(agent.memory) > batch_size:
            loss = agent.learn(batch_size)
            # Logging training loss every 10 timesteps
            if time % 10 == 0:
                print("episode: {}/{}, time: {}, loss: {:.4f}"
                      .format(e, EPISODES, time, loss))
    #if e % 10 == 0:
#        agent.save("./save/cartpole-dqn.h5")
env.close()


